command = {}

command.cls = function(PARAMS)
    clear_screen
    return _callback.catch("", 1)
end function
command.cs = @command.cls
command.clear = @command.cls

command.exit = function(PARAMS)
    printb("[blbx][system]: exiting blbx suite...".c("black black purple"))
    return _callback.catch("", 1)
end function
command["-q"] = @command.exit

command.ls = function(PARAMS) 
    store = {"root_file": false, "target_file":false}
    init = function()

        store.root_file = fif(Session.process.is_connected(), Session.borrow("file", Session.machine.ip.get_lan()), get_shell.host_computer.File("/"))
        if not tp(store.root_file) == "file" then return _callback.catch("[blbx][cd][err]: remote session has no file objects...")
        current_path_file = Directory.find_file(store.root_file, Prompt.get_current_path())
        
        if not PARAMS.len then
            return _callback.catch(Directory.find_file(store.root_file, Prompt.get_current_path()), 1)
        end if 

        if PARAMS.len != 1 then return _callback.catch("[blbx][ls][usage]: ls [<file_path> | <file_name>]")
        
        param_token = PARAMS[0]
        if tp([TokenTypes.String, TokenTypes.Argument].indexOf(param_token.type)) != "number" then return _callback.catch("[blbx][ls][err]: second argument must be a string or argument...")   
    
        valid_file = Directory.validate_file(store.root_file, "ls", PARAMS, 1)
        if not tp(valid_file.data) == "file" then return _callback.catch(valid_file.data)
        return valid_file
    end function
    error_handling = init()
    if not error_handling.status then return error_handling

    store.target_file = error_handling.data
    children = store.target_file.get_folders + store.target_file.get_files
    result   = c("b") + "PERMS GROUP OWNER SIZE NAME"
    folders  = []
    binaries = []
    texts    = []
    path_arr = []

    for file in children 
        path_arr.push(file.path)
        if not file.is_folder and not file.is_binary then texts.push((file.permissions + " " + file.group + " " + file.owner + " " + file.size + " " + file.name).c("black"))
        if file.is_folder then folders.push((file.permissions + " " + file.group + " " + file.owner + " " + file.size + " ").c("purple") + b + (file.name.c("purple")))
        if file.is_binary and not file.is_folder then binaries.push((file.permissions+" "+file.group+" "+file.owner+" "+file.size+" ").color("purple")+b+(file.name.color("white")))
    end for 

    print
    ([result] + folders + binaries + texts).format_columns
    print 
    
    return _callback.catch(path_arr, 1)
end function

command.cd = function(PARAMS)
    store = {"root_file": false, "target_file":false}
    init = function()
        store.root_file = fif(Session.process.is_connected(), Session.borrow("file", Session.machine.ip.get_lan()), get_shell.host_computer.File("/"))
        if not tp(store.root_file) == "file" then return _callback.catch("[blbx][cd][err]: remote session has no file objects...")
        
        current_path_file = Directory.find_file(store.root_file, Prompt.get_current_path())
        
        
        if not PARAMS.len then
            if Prompt.get_current_path() == "/" then return _callback.catch(Directory.find_file(store.root_file, Prompt.get_current_path()), 1)
            return _callback.catch(Directory.find_file(store.root_file, Prompt.get_current_path()).parent, 1)
        end if 
        
        if PARAMS.len != 1 then return _callback.catch("[blbx][cd][usage]: cd [<file_path> | <file_name>]")
        
        param_token = PARAMS[0]
        if tp([TokenTypes.String, TokenTypes.Argument, TokenTypes.Dot].indexOf(param_token.type)) != "number" then return _callback.catch("[blbx][cd][err]: second argument must be a string or argument...")   
        
        if param_token.type == TokenTypes.Dot and (param_token.value.is_match("\.+")) then 
            if param_token.value == "." then
                print
                return _callback.catch(current_path_file, 1)
            end if 

            if param_token.value == ".." then 
                print
                return _callback.catch(fif(current_path_file.path == "/", current_path_file, current_path_file.parent), 1)
            end if 

            if param_token.value == "..." then
                print
                return _callback.catch(store.root_file, 1)
            end if 
        end if 
        
        valid_file = Directory.validate_file(store.root_file, "cd", PARAMS, 1)
        if not tp(valid_file.data) == "file" then return _callback.catch(valid_file.data)
        return valid_file
    end function
    print 
    error_handling = init()
    if not error_handling.status then return error_handling
    
    Prompt.set_path(error_handling.data.path)
    
    return _callback.catch(error_handling.data.path, 1)
end function

command.cat = function(PARAMS)
 store = {"root_file": false, "target_file":false}
    init = function()
        store.root_file = fif(Session.process.is_connected(), Session.borrow("file", Session.machine.ip.get_lan()), get_shell.host_computer.File("/"))
        if not tp(store.root_file) == "file" then return _callback.catch("[blbx][cd][err]: remote session has no file objects...")

        if not PARAMS.len then 
            store.target_file = Directory.find_file(store.root_file, Prompt.get_current_path()).parent
            return _callback.catch("", 1)
        end if 

        param_token = PARAMS[0]
        if tp([TokenTypes.String, TokenTypes.Argument].indexOf(param_token.type)) != "number" then return _callback.catch("[blbx][cd][err]: second argument must be a string or argument...")   

        valid_file = Directory.validate_file(store.root_file, "cat", PARAMS)
        if not tp(valid_file.data) == "file" then return _callback.catch(valid_file.data)

        if not valid_file.data.has_permission("r") then return _callback.catch("[blbx][cat][err]: read file permissions denied...")
        if valid_file.data.is_binary then return _callback.catch("[blbx][cat][err]: file '" + valid_file.data.path + "' must not be a binary...")
        if valid_file.data.is_folder then return _callback.catch("[blbx][cat][err]: file '" + valid_file.data.path + "' must not be a folder...")

        return valid_file
    end function
    error_handling = init()
    if not error_handling.status then return error_handling
    store.target_file = error_handling.data

    print 
    print store.target_file.get_content.c("black black purple")
    print 

    return _callback.catch("", 1)
end function

command.rm = function(PARAMS)
    store = {"root_file": false, "target_file": false}
    init = function()
        store.root_file = fif(Session.process.is_connected(), Session.borrow("file", Session.machine.ip.get_lan()), get_shell.host_computer.File("/"))
        if not tp(store.root_file) == "file" then return _callback.catch("[blbx][cd][err]: remote session has no file objects...")
        current_path_file = Directory.find_file(store.root_file, Prompt.get_current_path())

        if not PARAMS.len then
            Usage.display("rm", Usage.get_usage_object("rm"))
            return _callback.catch("", 0)
        end if 

        if PARAMS.len != 1 then return _callback.catch("[blbx][ls][usage]: ls [<file_path> | <file_name>]")
        
        param_token = PARAMS[0]
        if tp([TokenTypes.String, TokenTypes.Argument].indexOf(param_token.type)) != "number" then return _callback.catch("[blbx][ls][err]: second argument must be a string or argument...")   
    
        valid_file = Directory.validate_file(store.root_file, "rm", PARAMS)
        if not tp(valid_file.data) == "file" then return _callback.catch(valid_file.data)
        return valid_file
    end function
    error_handling = init()
    if not error_handling.status then return error_handling

    error_handling.data.delete 

    return _callback.catch("", 1)
end function 

command.find = function(PARAMS)
    store = {"root_file": false, "target_file": false}
    store.root_file = fif(Session.process.is_connected(), Session.borrow("file", Session.machine.ip.get_lan()), get_shell.host_computer.File("/"))
    if not tp(store.root_file) == "file" then return _callback.catch("[blbx][cd][err]: remote session has no file objects...")
    current_path_file = Directory.find_file(store.root_file, Prompt.get_current_path())
    
    init = function()
        if not PARAMS.len then
            Usage.display("find", Usage.get_usage_object("find"))
            return _callback.catch("", 0)
        end if 
        
        param_token = PARAMS[0]
        if tp([TokenTypes.String, TokenTypes.Argument].indexOf(param_token.type)) != "number" then return _callback.catch("[blbx][find][err]: second argument must be a string or argument...")   

        valid_file = Directory.validate_file(store.root_file, "find", PARAMS, 0, 1)
        if not tp(valid_file.data) == "file" then return valid_file
        _callback.debug("<color=yellow>"+ valid_file, "linux", 191)
        return valid_file
    end function
    error_handling = init()
    if not error_handling.status then return error_handling

    add_line
    for file_object_arr in error_handling.data 
        object = file_object_arr[0]
        printb("file path: ".c("black") + object.path.c("purple"))
        printb("file name: ".c("black") + object.name.c("purple"))
        add_line
    end for 

    return _callback.catch(error_handling.data, 1)
end function 
command["--f"] = @command.find

command.apt = function(PARAMS)
    config = {"apt_client": false}
    run = {"upgrade": 0, "update": 0, "addrepo": 0, "delrepo": 0, "search": 0, "show": 0, "install": 0}
    init = function()
        config.apt_client = Exploit.module.get_local_lib("aptclient.so")
        if not (config.apt_client) == "aptclientLib" then return _callback.catch("[blbx][apt][err]: 'aptclient.so' library not found on local machine...")
        
        if PARAMS.len < 1 then 
            Usage.display("apt", Usage.get_usage_object("apt"))
            return _callback.catch("", 0)
        end if 

        flags_arr = Params.extract_type(PARAMS, [TokenTypes.Flag])

        for flag_token in flags_arr 
            if tp(["update", "upd"].indexOf(flag_token.value.values.clean(["-"]).join(""))) == "number" then run.update = 1
            if tp(["upgrade", "upg"].indexOf(flag_token.value.values.clean(["-"]).join(""))) == "number" then run.upgrade = 1
            if tp(["addrepo", "adr"].indexOf(flag_token.value.values.clean(["-"]).join(""))) == "number" then run.addrepo = 1
            if tp(["delrpo", "dlr"].indexOf(flag_token.value.values.clean(["-"]).join(""))) == "number" then run.delrepo = 1
            if tp(["search", "sch"].indexOf(flag_token.value.values.clean(["-"]).join(""))) == "number" then run.search = 1
            if tp(["show", "shw"].indexOf(flag_token.value.values.clean(["-"]).join(""))) == "number" then run.show = 1
            if tp(["install", "i"].indexOf(flag_token.value.values.clean(["-"]).join(""))) == "number" then run.install = 1
        end for 

        return _callback.catch("", 1)
    end function 
    error_handling = init()
    if not error_handling.status then return error_handling

    print tp(config.apt_client)

    handle = {}
    handle["upgrade"] = function()
        print 
        printb("*** installing library metaxploit.so ***".c("purple"))
        config.apt_client.install("metaxploit.so")
        print
        printb("*** installing library crypto.so ***".c("purple"))
        config.apt_client.install("crypto.so")
        print

        return _callback.catch("", 1) 
    end function 

    handle["update"] = function(PARAMS)
        printb("updating package lists...".c("black"))
        output = config.apt_client.update 
        if tp(output) == "string" and output.len > 0 then return _callback.catch("[blbx][apt][err]: " + output)
        success 

        return _callback.catch("", 1)
    end function

    handle["addrepo"] = function(PARAMS)
        ip_address = Params.extract_type(PARAMS, [TokenTypes.Float])[0]
        if not ip_address then return _callback.catch("[blbx][apt][err]: must include ip address argument...")
        if not is_valid_ip(ip_address) then return _callback.catch("[blbx][apt][err]: ip address '" + ip_address + "' is invalid...")

        output = config.apt_client.add_repo(ip_address)
        if tp(output) == "string" and output.len > 0 then return _callback.catch("[blbx][apt][err]: " + output)
        
        config.apt_client.update
        print 
        return _callback.catch("", 1)
    end function  

    handle["delrepo"] = function(PARAMS)
        ip_address = Params.extract_type(PARAMS, [TokenTypes.Float])[0]
        if not ip_address then return _callback.catch("[blbx][apt][err]: must include ip address argument...")
        if not is_valid_ip(ip_address) then return _callback.catch("[blbx][apt][err]: ip address '" + ip_address + "' is invalid...")

        output = config.apt_client.del_repo(ip_address)
        if tp(output) == "string" and output.len > 0 then return _callback.catch("[blbx][apt][err]: " + output)
        
        config.apt_client.update
        print 
        return _callback.catch("", 1)
    end function

    handle["search"] = function(PARAMS)
        program_name = Params.extract_type(PARAMS, [TokenTypes.String, TokenTypes.Argument])[0]
        if not program_name then return _callback.catch("[blbx][apt][err]: must include program name argument...")

        output = config.apt_client.search(program_name)
        new_output = output.split("<b>|</b>").clean([""])

        for line in new_output 
            line = line.replace(c10, "")
            if line.split(" ").len == 1 then 
                printb(line.c("purple") + ": ".c("black"))
                continue 
            end if 
            printb(short_dialogue(line))
            print
        end for 
    end function 

    handle["show"] = function(PARAMS)
        program_name = Params.extract_type(PARAMS, [TokenTypes.String, TokenTypes.Argument])[0]
        if not program_name then return _callback.catch("[blbx][apt][err]: must include program name argument...")

        output = config.apt_client.search(program_name)
        new_output = output.split("<b>|</b>").clean([""])

        for line in new_output
            line = line.replace(c10, "")
            while line[0] == " "
                line = line[1:]
            end while 
            if line.split(" ").len == 1 then 
                printb(line.c("purple") + ": ".c("black"))
                continue 
            end if 
            printb(shorten_dialogue(line))
            print
        end for 

        return _callback.catch("", 1)
    end function 

    handle["install"] = function(PARAMS)
        program_name = Params.extract_type(PARAMS, [TokenTypes.String, TokenTypes.Argument])[0]
        if not program_name then return _callback.catch("[blbx][apt][err]: must include program name argument...")

        output = config.apt_client.install(program_name)
        if tp(output) == "string" then return _callback.catch("[blbx][apt][err]: " + output)

        printb("downloaded: ".c("black") + program_name.c("purple"))
        print 
        
        return _callback.catch("", 1)
    end function 

    for func_name in handle.indexes 
        if not run[func_name] then continue 
        proxy = handle[func_name]

        return proxy()
    end for

    return _callback.catch("", 1)
end function 

command.help = function(PARAMS)
    
    message = "there are a list of people who have gang stalked me for\nthe past six plus years. they have stopped at nothing to make my life a living hell. they have driven me to suicide four times. they have abused me physically, verbally, and psychologically since childhood.\n\nI need your help.\n\nThe day for revenge is here.\nI am sueing these people for group defamation. \nunder this offense, every occurance of obtaining information \nabout someone to share amongst others for the \npurpose of defaming the individual named in the \ninformation is fined anywhere from $500 to $10,000 \ndepending on the duration of the offense. \nin my case six plus years. The more offenders you \ndiscover, (anyone who knew this happened and said\n nothing, and anyone who offended), the more damages I am \nentitled to. the more information you can find about these offenders, \nthe more money you stand to make. Keep the information you find relevant to \nthe instructions and this case. You will earn a small \npercentage (no less than 1%) of the winnings which is in the \nhigh millions. you will get the docusign agreement \nin an anonymous email inbox as well as money in an \naccount created by me by the end of the proceedings. \nthe information on;"

    print message

    return _callback.catch("", 1)
end function 

command.show = function(PARAMS)
    init = function()
        //if not (Session.object.shell.list + Session.object.computer.list + Session.object.file.list).len then return _callback.catch("[blbx][show][err]: no objects obtained from target. please run [attack] first...")
        return _callback.catch("", 1)
    end function 
    error_handling = init()
    if not error_handling.status then return error_handling
    
    Exploit.device.show_tree()

    return _callback.catch("", 1)
end function 

command.nmap = function(PARAMS, data = 0)
    config = {"rhost": 0}
    init = function()
        if not PARAMS.len then 
            Usage.display("nmap", Usage.get_usage_object("nmap"))
            return _callback.catch("", 0)
        end if 

        ip_address = Params.extract_type(PARAMS , [TokenTypes.Float, TokenTypes.String])[0]
        if not ip_address then return _callback.catch("[blbx][nmap][err]: must include an ip address argument...")
        ip_address = ip_address.value
        if not is_valid_ip(ip_address) then _callback.catch("[blbx][nmap][err]: invalid ip address '" + ip_address + "'...")
        config.rhost = ip_address

        return _callback.catch("", 1)
    end function

    error_handling = init()
    if not error_handling.status then return error_handling

    remote_router = get_router(config.rhost)
    if not remote_router then return _callback.catch("[blbx][nmap][err]: ip address '" + config.rhost + "' is not reachable...")
    remote_ports = remote_router.used_ports
    printb(("scanning ports at: ").c("black black purple") + (hide_ip(config.rhost) + " ").c("purple") + current_date.c("black black purple")+ c0) 
    if not remote_ports.len then
        printb("interrupter. no open ports...".c("black") + c0)
        return _callback("", 0)
    end if
    info = ["PORT STATE SERVICE VERSION LAN".c("black")]
    s = " "

    for port in remote_ports
        service_info = remote_router.port_info(port)
        lan_address = port.get_lan_ip 
        if port.is_closed then status = "closed".c("black") else status = "open".c("purple")
        info.push((str(port.port_number).c("purple") + s + status + s + service_info.c("black") + s + lan_address.c("black black purple")))
    end for 

    print
    info.format_columns
    print 

    return _callback.catch(config.rhost, 1) 
end function 

command.ps = function(PARAMS)
    init = function()
        return _callback.catch("", 1)
    end function 
    error_handling = init()
    if not error_handling.status then return error_handling

    if Session.process.is_connected() then 
        computer_instance = Session.borrow("computer", Session.machine.ip.get_lan())
        if not tp(computer_instance) == "computer" then return _callback.catch("[blbx][ps][err]: no computer objects from machine '" + Session.machine.ip.get_lan() + "' stored...")
    else 
        computer_instance = get_shell.host_computer
    end if 

    processes = computer_instance.show_procs 
    process_arr = processes.split(c10)
    result_arr = ["USER PID CPU MEM PROC".color("black")]
    process_arr = []

    for line in process_arr
        line_arr = line.split(" ")
        process_arr.push([line_list[-1], line_list[1]])
        pretty_line = (line_list[:-1].join(" ").color("black black purple") + " " + b + line_list[-1].color("purple"))
        result_arr.push(pretty_line)
    end for 
    result_arr.format_columns()
    add_line

    return _callback.catch(process_arr, 1)
end function 

command.ifconfig = function(PARAMS)
    init = function()
        flag_token_arr = Params.extract_flags(PARAMS)
        if flag_token_arr.len then 
            for flag_token in flag_token_arr 
                flag_token_value = flag_token.value 
                if tp(["help", "h"].indexOf(flag_token_value.values.clean("-").join(""))) == "number" then 
                    Usage.display("ifconfig", Usage.get_usage_object("ifconfig"))
                    return _callback.catch("", 0) 
                end if 
            end for   
        end if 

        return _callback.catch("", 1)
    end function 
    error_handling = init()
    if not error_handling.status then return error_handling

    if Session.process.is_connected() then 
        router_instance = get_router(Session.machine.ip.get_pub()) 
        computer_instance = Session.borrow("computer", Session.machine.ip.get_lan())
        if not tp(computer_instance) == "computer" then return _callback.catch(("[blbx][ifconfig][err]: no computer objects from machine '" + Session.machine.ip.get_lan() + "' stored..."))
    else 
        router_insance = get_router
        computer_instance = get_shell.host_computer
    end if 

    lan_address = computer_instance.local_ip
    ip_address = computer_instance.public_ip
    gate_way = computer_instance.network_gateway 
    output = ""
    
    if computer_instance.active_net_card == "WIFI" then 
        output = output + b + ("wifi connection @ '".c("black black white") + router_insance.essid_name.color("purple") + "'")
    else 
        output = output + b + ("ethernet connection...".c("black"))
    end if 

    output = output + c10 + b + bar(30)
    output = output + c10 + b + "public ip: ".c("black") + ip_address.c("purple")
    output = output + c10 + b + "local ip: ".c("black") + lan_address.c("purple")
    output = output + c10 + b + "gateway: ".c("black") + gate_way.c("purple")
    
    print output+c10+c0
    
    result = fif(Session.process.is_connected(), [Session.machine.ip.get_pub(), Session.machine.ip.get_lan()], [get_shell.host_computer.public_ip, get_shell.host_computer.local_ip])
    return _callback.catch(result, 1)
end function 
command.ifc = @command.ifconfig



// command.ps = function(PARAMS)
//     init = function()

//         return _callback.catch("", 1)
//     end function 
//     error_handling = init()
//     if not error_handling.status then return error_handling

//     _callback.catch("", 1)
// end function 


// linux